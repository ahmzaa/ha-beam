#!/usr/bin/python
# Author: AHMZA
"""This script is a post / get interface for the home assistant api.
One use of this is toggling entities i.e lights or light groups"""


# Need to do:
# - Work on the get_request() and parse_json()
# - Add argument to take in request action.
# - Get entity IDs and make them selectable.


import sys
import json
import argparse
import requests

parser = argparse.ArgumentParser(
    prog="habeam",
    description="Home Assistant API Controller",
    epilog="Any Questions feel free to reach out via support@ahmza.com",
)

group_con = parser.add_argument_group("Connection")
group_con.add_argument("-u", "--url", required=True, help="Home Assistant Server URL")
group_con.add_argument(
    "-t", "--token", required=True, help="Home Assistant Long Lived Token"
)
group_con.add_argument(
    "-m",
    "--method",
    default="p",
    choices=["g", "p"],
    help="Specify The Method i.e GET / POST. Default Post",
)

group_ent = parser.add_argument_group("Entity")
group_ent.add_argument("-e", "--entity", required=True, help="Home Assistant Entity ID")
group_ent.add_argument(
    "-c",
    "--control",
    default="toggle",
    choices=["on", "off", "toggle"],
    help="Control Action. Default Toggle",
)

args = parser.parse_args()


def parse_json(data):
    """take data from get_requests and parse into usable format"""
    print(data)


def request_handler(method, url, headers, data):
    """handles requests"""
    if method == "p":
        try:
            requests.post(url, headers=headers, json=data)
        except requests.exceptions.RequestException as e:
            raise SystemExit(e) from e
        sys.exit()
    elif method == "g":
        parse_json(requests.get(url, headers=headers, json=data))
    else:
        print("method " + method + " not supported")
        return


def main(method):
    """picks method of communication based on the -m flag, sets variables"""
    url = args.url + "/api/services/light/" + args.control
    headers = {
        "Authorization": "Bearer " + args.token,
        "content-type": "application/json",
    }
    data = {"entity_id": args.entity}

    request_handler(method, url, headers, data)
    parser.print_help()

main(args.method)
